const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/papaparse.min-B_zsPfNe.js","assets/index-C7XHXQ4p.js","assets/index-DxJ0MxF5.css"])))=>i.map(i=>d[i]);
import{_ as x}from"./index-C7XHXQ4p.js";const y=async S=>{console.log(`[CSV Parser] Starting to parse CSV with ${S.length} characters`);const $=await x(()=>import("./papaparse.min-B_zsPfNe.js").then(e=>e.p),__vite__mapDeps([0,1,2])),u=S.trim().split(`
`);if(console.log(`[CSV Parser] Found ${u.length} lines`),u.length===0)return[];const a=$.parse(u[0]).data[0];console.log("[CSV Parser] Headers found:",a);const d=a.findIndex(e=>e.toLowerCase()==="number"||e.toLowerCase()==="s.no."||e.toLowerCase()==="s.no"||e.toLowerCase()==="serial"||e.toLowerCase()==="serial no"||e.toLowerCase()==="serial no."||e.toLowerCase()==="no"),m=a.findIndex(e=>/part\s*no/i.test(e)),f=a.findIndex(e=>e.toLowerCase().includes("description")),g=a.findIndex(e=>e.toLowerCase()==="qty"||e.toLowerCase()==="quantity"),p=a.findIndex(e=>e.toLowerCase()==="name");console.log(`[CSV Parser] Column indexes - Number: ${d}, PartNo: ${m}, Desc: ${f}, Qty: ${g}, Name: ${p}`);const w=u.slice(1).map(e=>e.trim()).filter(e=>e.length>0);console.log(`[CSV Parser] Data rows after filtering: ${w.length}`);const P=w.map((e,l)=>{console.log(`[CSV Parser] Processing line ${l+1}: ${e}`);const r=$.parse(e).data[0];console.log(`[CSV Parser] Parsed values for line ${l+1}:`,r);const o={};a.forEach((t,n)=>{n<r.length?o[t]=r[n]||"":o[t]=""});const i=g>=0&&g<r.length?r[g]:o.Qty||o.qty||o.Quantity||o.quantity||"",c=p>=0&&p<r.length?r[p]:"",s={id:l+1,number:d>=0&&d<r.length?r[d]:o.Number||o.number||"",name:i||c,description:f>=0&&f<r.length?r[f]:o.Description||o.description||"",partNumber:m>=0&&m<r.length?r[m]:o["Part No."]||o["part no."]||o["part no"]||o["Part No"]||""};return console.log(`[CSV Parser] Created row ${l+1}:`,s),a.forEach(t=>{!["id"].includes(t)&&!Object.keys(s).some(n=>n.toLowerCase()===t.toLowerCase())&&(s[t]=o[t])}),s});console.log(`[CSV Parser] Total processed rows: ${P.length}`);const b=P.filter(e=>e.number.trim()!=="");console.log(`[CSV Parser] Final rows after filtering empty numbers: ${b.length}`);const V=b.sort((e,l)=>{const C=e.number.toString(),r=l.number.toString();console.log(`[CSV Parser] Sorting: comparing "${C}" vs "${r}"`);const o=C.match(/^(\d+)(.*)$/),i=r.match(/^(\d+)(.*)$/);if(!o||!i)return console.log(`[CSV Parser] Regex match failed for "${C}" or "${r}"`),0;const c=parseInt(o[1]),s=parseInt(i[1]),t=o[2],n=i[2];if(console.log(`[CSV Parser] Extracted: aNum=${c}, bNum=${s}, aSuffix="${t}", bSuffix="${n}"`),c!==s){const L=c-s;return console.log(`[CSV Parser] Different numbers: ${c} - ${s} = ${L}`),L}return t===""&&n!==""?-1:n===""&&t!==""?1:t===n?0:t.localeCompare(n)});return console.log("[CSV Parser] Sorted rows:",V.map(e=>e.number)),V};export{y as parseCSV};
