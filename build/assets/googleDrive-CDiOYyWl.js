const d="AIzaSyBp_kI2hVmYJSctwZsQisBKjly8SB-Wjgc",u="1FooJSrlj9M-O_96uzf6x4Y28Q0grUhN4",f="https://www.googleapis.com/drive/v3",l=async e=>{const n=await fetch(e);if(!n.ok)throw new Error(`Drive request failed: ${n.status} ${n.statusText}`);return n},p=e=>`${f}/files/${encodeURIComponent(e)}?alt=media&key=${encodeURIComponent(d)}`,h=async e=>{const n=encodeURIComponent(`'${e}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false`),t=`${f}/files?q=${n}&fields=files(id,name,mimeType)&key=${encodeURIComponent(d)}`,s=await(await l(t)).json();return Array.isArray(s.files)?s.files:[]},w=async(e,n)=>{const t=s=>s.replace(/\s+/g," ").trim().toLowerCase(),r=t(n);try{const s=n.replace(/'/g,"\\'"),a=encodeURIComponent(`'${e}' in parents and name = '${s}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false`),i=`${f}/files?q=${a}&fields=files(id,name,mimeType)&key=${encodeURIComponent(d)}`,c=await(await l(i)).json();if(c.files&&c.files[0])return c.files[0]}catch{}try{const a=(await h(e)).find(i=>t(i.name)===r);if(a)return a}catch{}return console.warn("[Drive] findChildFolderByName: not found",{parentFolderId:e,requested:n}),null},R=async e=>{const n=encodeURIComponent(`'${e}' in parents and trashed = false`),t=`${f}/files?q=${n}&fields=files(id,name,mimeType)&key=${encodeURIComponent(d)}`,s=await(await l(t)).json();return Array.isArray(s.files)?s.files:[]},g=async e=>w(u,e),C=async e=>{const n=e.split("/").filter(Boolean);let t=u,r=null;for(const s of n){const a=await w(t,s);if(!a)return null;r=a,t=a.id}return r},j=async(e,n)=>{for(const t of n){const r=t.replace(/'/g,"\\'"),s=encodeURIComponent(`'${e}' in parents and name = '${r}.json' and trashed = false`),a=`${f}/files?q=${s}&fields=files(id,name)&key=${encodeURIComponent(d)}`,o=await(await l(a)).json(),c=o.files&&o.files[0];if(c){const m=p(c.id),y=await(await l(m)).text();try{return JSON.parse(y.trim().replace(/^\uFEFF/,""))}catch{}}}try{const r=(await R(e)).filter(o=>/\.json$/i.test(o.name)),s=o=>o.replace(/\.json$/i,"").replace(/-coordinates$/i,"").replace(/_/g," ").replace(/\s+/g," ").trim().toLowerCase(),a=new Set(n.map(o=>s(o))),i=r.find(o=>a.has(s(o.name)));if(i){const c=await(await l(p(i.id))).text();try{return JSON.parse(c.trim().replace(/^\uFEFF/,""))}catch{return null}}}catch{}return null},F=async(e,n)=>{const t=n.replace(/'/g,"\\'"),r=encodeURIComponent(`'${e}' in parents and name = '${t}.csv' and trashed = false`),s=`${f}/files?q=${r}&fields=files(id,name)&key=${encodeURIComponent(d)}`,i=await(await l(s)).json(),o=i.files&&i.files[0];if(!o)return"";const c=p(o.id);return await(await l(c)).text()},U=async(e,n)=>{const t=["png","jpg","jpeg","webp","gif"],r=n.replace(/'/g,"\\'");for(const s of t){const a=encodeURIComponent(`'${e}' in parents and name = '${r}.${s}' and trashed = false`),i=`${f}/files?q=${a}&fields=files(id,name)&key=${encodeURIComponent(d)}`,c=await(await l(i)).json(),m=c.files&&c.files[0];if(m)return p(m.id)}return null};export{F as fetchCsvRowsInFolder,j as fetchJsonInFolderByCandidates,w as findChildFolderByName,U as findImageFileInFolder,p as getDriveDownloadUrl,R as listFilesInFolder,h as listSubfolders,g as resolveFolderByNameUnderRoot,C as resolveFolderByPath};
